@yBASIC, pronounced "SnailBASIC" is a language subset for the 3DS interpreter [[http://smilebasic.com/en/][SmileBASIC]].

One problem people often have with BASIC dialects is that there are not enough punctuation characters required.
@yBASIC attempts to remedy this.  In fact, the only alphanumeric characters used are those for "GOTO"

Note that live snails (@y) are not permitted in SnailBASIC: only deceased snails (@_) are valid.

@yBASIC can take no input, because snails are obstinate and don't care what you want them to do.

snailbasic.ps1 is an compiler for @yBASIC.  Please submit issues as you encounter them.

* Examples
source.txt:
#+BEGIN_SRC
MOV A,1
@0
PUSH
MOV A,A--A
PRINT A
GOTO @0
#+END_SRC
.\snailbasic source.txt -stdout
#+BEGIN_SRC
_$=""_=(!.)@_:GOTO "@__"+"_"*!!_@__:_$=_$+"."GOTO@____@___:_$=_$+"_"@____:_%=_%--!._=_--_?_:GOTO@_
#+END_SRC

* Source Rules
+ One instruction per line.
+ Labels must begin at the first column of their line.
+ Labels are in the form ~@[0-9]+~.
+ Labels must take sequential numbers to avoid unexpected behavior (the compiler generates labels starting at the end of <# user labels>.
+ PUSH, POP, UNSHIFT, and SHIFT all work directly with the A variable only.
+ Comments are begun by either ' or ; and result in the rest of the line being ignored.
+ Valid variables are [A-Z]

* Symbolic Language Instruction List
** GOTO
#+BEGIN_SRC
GOTO @#
#+END_SRC
Jump to a label.
** MOV
#+BEGIN_SRC
MOV [A-Z],Expression
#+END_SRC
Assign result of expression to a variable.  Expressions undergo the following transformations:
+ ~[A-Z]~ -> respective ~_~ variable
+ ~[0-9]+~ -> ~(!.+)~ construction
+ ~0~ -> ~.~
** IF
#+BEGIN_SRC
IF [A-Z]
#+END_SRC
If the variable is truthy, evaluate the next instruction (do nothing).  Otherwise, skip one instruction.
** PRINT :likely to change:
#+BEGIN_SRC
PRINT [A-Z]
#+END_SRC
Print the value of the specified variable to console.
** SET
#+BEGIN_SRC
SET [A-Z]
#+END_SRC
Write the logical value of ~A~ to the binary tape at the index specified
** GET
#+BEGIN_SRC
GET [A-Z]
#+END_SRC
Read from the binary tape at the index specified into ~A~
** UNSHIFT
#+BEGIN_SRC
UNSHIFT
#+END_SRC
Unshift the logical value of ~A~ to the beginning of the binary tape
** SHIFT
#+BEGIN_SRC
SHIFT
#+END_SRC
Shift the beginning of the binary tape into ~A~
** PUSH
#+BEGIN_SRC
PUSH
#+END_SRC
Push the logical value of ~A~ to the end of the binary tape
** POP
#+BEGIN_SRC
POP
#+END_SRC
Pop the end of the binary tape into ~A~
